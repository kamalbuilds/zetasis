import "../styles/globals.css";
import type { AppProps } from "next/app";

import { goerli, polygonMumbai, bscTestnet } from "wagmi/chains";
import { useEffect, useState } from "react";
import { Box, ChakraProvider, extendTheme } from "@chakra-ui/react";
import { publicProvider } from "wagmi/providers/public";
import { configureChains, createClient, Chain, WagmiConfig } from "wagmi";
import { InjectedConnector } from "wagmi/connectors/injected";
import Navbar from "@components/Navbar";
import Head from "next/head";
import styles from "@styles/Home.module.css";

import { accordionAnatomy, switchAnatomy } from "@chakra-ui/anatomy";
import { createMultiStyleConfigHelpers } from "@chakra-ui/react";

export const athens = {
  id: 7001,
  name: "ZetaChain Athens Testnet",
  network: "athens",
  nativeCurrency: {
    decimals: 18,
    name: "aZETA",
    symbol: "AZETA",
  },
  rpcUrls: {
    public: {
      http: ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public"],
    },
    default: {
      http: ["https://zetachain-athens-evm.blockpi.network/v1/rpc/public	"],
    },
  },
  blockExplorers: {
    etherscan: {
      name: "Athens",
      url: "https://explorer.athens.zetachain.com/",
    },
    default: {
      name: "Athens",
      url: "https://explorer.athens.zetachain.com/",
    },
  },
} as const satisfies Chain;

const { chains, provider } = configureChains(
  [goerli, polygonMumbai, bscTestnet, athens],
  [publicProvider()]
);

const wagmiClient = createClient({
  autoConnect: true,
  connectors: [new InjectedConnector({ chains })],
  provider,
});

const { definePartsStyle: switchStyle, defineMultiStyleConfig: switchConfig } =
  createMultiStyleConfigHelpers(switchAnatomy.keys);

const { definePartsStyle, defineMultiStyleConfig } =
  createMultiStyleConfigHelpers(accordionAnatomy.keys);

const baseStyle = switchStyle({
  thumb: {
    bg: "rgb(30, 30, 30)",
    boxShadow: "0px 0px 4px rgba(255, 255, 255, 0.25) !important",
    _checked: {
      bg: "rgb(75, 75, 75)",
    },
  },
  track: {
    background:
      "linear-gradient(rgb(12, 12, 12), rgb(12, 12, 12)) padding-box, linear-gradient(to bottom right, rgb(209, 209, 209), rgb(79, 79, 79), rgb(28, 28, 28)) border-box !important",
    border: "1px solid transparent !important",
    _checked: {
      bg: "linear-gradient(rgb(30, 30, 30), rgb(30, 30, 30)) padding-box, linear-gradient(to bottom right, rgb(209, 209, 209), rgb(79, 79, 79), rgb(28, 28, 28)) border-box !important",
    },
  },
});

const custom = definePartsStyle({
  root: {
    paddingBottom: "2rem",
  },
  panel: {
    padding: 0,
  },
  button: {
    padding: 0,
  },
  item: {
    border: "none",
  },
});

const switchTheme = defineMultiStyleConfig({ variants: { custom } });

const accordionTheme = defineMultiStyleConfig({
  variants: { custom },
});

const theme = extendTheme({
  styles: {
    global: {
      "*": {
        fontFamily: "Inter",
        color: "white !important",
      },
      a: {
        _hover: {
          textDecoration: "none !important",
        },
      },
    },
  },
  components: { Accordion: accordionTheme, Switch: switchTheme },
});

function MyApp({ Component, pageProps, router }: AppProps) {
  const [mounted, setMounted] = useState(false);

  useEffect(() => setMounted(true), []);
  if (!mounted) return null;

  return (
    <WagmiConfig client={wagmiClient}>
      <ChakraProvider theme={theme}>
        <Head>
          <title>Zetasis: Powering the Creative Economy</title>
          <meta name="description" content="Generated by create next app" />
          <link rel="icon" href="/favicon.ico" />
        </Head>
        <Navbar />
        <Component {...pageProps} key={router.route} />
      </ChakraProvider>
      <Box className={styles.ellipseOne}></Box>
    </WagmiConfig>
  );
}

export default MyApp;
